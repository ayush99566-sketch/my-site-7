{
  "timestamp": "2025-08-03T18:47:42.822Z",
  "version": "1.0.0",
  "files": {
    "homePage": {
      "filename": "Home.c1dmp.js",
      "content": "// ULTRA-SMOOTH HOME PAGE - Landing Page with Butter-Smooth Performance\n// Includes: Ultra-smooth scrolling, Enhanced animations, Performance monitoring, Mobile optimization\n\n$w.onReady(function () {\n    console.log('🚀 Ultra-Smooth Home Page Loading...');\n    \n    // Performance state management\n    const state = {\n        isMobile: window.innerWidth < 768,\n        isScrolling: false,\n        lastScrollY: 0,\n        scrollRAF: null,\n        performanceMode: 'ultra-smooth'\n    };\n    \n    // Wait for master page to be ready\n    const waitForMasterPage = () => {\n        if (window.ultraFastSite) {\n            initializeUltraSmoothHomePage();\n        } else {\n            setTimeout(waitForMasterPage, 50);\n        }\n    };\n    \n    function initializeUltraSmoothHomePage() {\n        console.log('🏠 Initializing Ultra-Smooth Home Page Features...');\n        \n        // ===== ULTRA-SMOOTH HERO SECTION =====\n        initializeHeroSection();\n        \n        // ===== ULTRA-SMOOTH FEATURES SHOWCASE =====\n        initializeFeaturesShowcase();\n        \n        // ===== ULTRA-SMOOTH CALL-TO-ACTION =====\n        initializeCallToAction();\n        \n        // ===== ULTRA-SMOOTH SOCIAL PROOF =====\n        initializeSocialProof();\n        \n        // ===== ULTRA-SMOOTH SCROLL SYSTEM =====\n        initializeUltraSmoothScroll();\n        \n        // ===== ULTRA-SMOOTH PERFORMANCE MONITORING =====\n        initializePerformanceMonitoring();\n        \n        console.log('✅ Ultra-Smooth Home Page Initialized Successfully!');\n    }\n    \n    // ===== ULTRA-SMOOTH HERO SECTION =====\n    function initializeHeroSection() {\n        const heroSection = $w('#heroSection') || $w('.hero') || $w('[data-testid=\"hero\"]');\n        if (!heroSection) return;\n        \n        // Ultra-smooth entrance animation with cubic-bezier\n        heroSection.opacity = 0;\n        heroSection.style.transition = 'opacity 1s cubic-bezier(0.4, 0, 0.2, 1), transform 1s cubic-bezier(0.4, 0, 0.2, 1)';\n        heroSection.style.transform = 'translateY(60px) scale(0.95)';\n        \n        // Trigger animation with delay\n        setTimeout(() => {\n            heroSection.opacity = 1;\n            heroSection.style.transform = 'translateY(0) scale(1)';\n        }, 200);\n        \n        // Stagger animation for hero elements with ultra-smooth timing\n        const heroElements = $w('#heroTitle, #heroSubtitle, #heroDescription, .hero-cta');\n        heroElements.forEach((element, index) => {\n            if (!element) return;\n            \n            element.opacity = 0;\n            element.style.transition = `opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1) ${0.6 + (index * 0.15)}s, transform 0.8s cubic-bezier(0.4, 0, 0.2, 1) ${0.6 + (index * 0.15)}s`;\n            element.style.transform = 'translateY(40px)';\n            \n            setTimeout(() => {\n                element.opacity = 1;\n                element.style.transform = 'translateY(0)';\n            }, 600 + (index * 150));\n        });\n        \n        // Ultra-smooth interactive background effect\n        const heroBackground = $w('#heroBackground') || heroSection;\n        if (heroBackground) {\n            let isHovering = false;\n            \n            heroBackground.onMouseMove((event) => {\n                if (!isHovering) return;\n                \n                const rect = heroBackground.getBoundingClientRect();\n                const x = (event.clientX - rect.left) / rect.width;\n                const y = (event.clientY - rect.top) / rect.height;\n                \n                // Ultra-smooth 3D transform\n                const rotateX = (y - 0.5) * 3;\n                const rotateY = (x - 0.5) * 3;\n                \n                heroBackground.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(1.02)`;\n                heroBackground.style.transition = 'transform 0.1s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            heroBackground.onMouseEnter(() => {\n                isHovering = true;\n                heroBackground.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            heroBackground.onMouseLeave(() => {\n                isHovering = false;\n                heroBackground.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale(1)';\n                heroBackground.style.transition = 'transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n        }\n    }\n    \n    // ===== ULTRA-SMOOTH FEATURES SHOWCASE =====\n    function initializeFeaturesShowcase() {\n        const features = $w('.feature, .feature-card, [data-feature]');\n        if (!features.length) return;\n        \n        // Create intersection observer for ultra-smooth feature animations\n        const featureObserver = new IntersectionObserver((entries) => {\n            entries.forEach((entry, index) => {\n                if (entry.isIntersecting) {\n                    const feature = entry.target;\n                    \n                    // Stagger animation with ultra-smooth timing\n                    setTimeout(() => {\n                        feature.style.opacity = '1';\n                        feature.style.transform = 'translateY(0) scale(1)';\n                        feature.style.transition = 'opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)';\n                        \n                        // Add hover effects for ultra-smooth interaction\n                        feature.onMouseEnter(() => {\n                            feature.style.transform = 'translateY(-8px) scale(1.02)';\n                            feature.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                        });\n                        \n                        feature.onMouseLeave(() => {\n                        feature.style.transform = 'translateY(0) scale(1)';\n                            feature.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                    });\n                    }, index * 100);\n                    \n                    featureObserver.unobserve(feature);\n                }\n            });\n        }, {\n            threshold: 0.2,\n            rootMargin: '0px 0px -50px 0px'\n        });\n        \n        // Observe all features\n        features.forEach(feature => {\n            feature.style.opacity = '0';\n            feature.style.transform = 'translateY(40px) scale(0.95)';\n            feature.style.transition = 'opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)';\n            featureObserver.observe(feature);\n        });\n    }\n    \n    // ===== ULTRA-SMOOTH CALL-TO-ACTION =====\n    function initializeCallToAction() {\n        const ctaButtons = $w('.cta-button, .btn-primary, [data-testid=\"cta-button\"]');\n        if (!ctaButtons.length) return;\n        \n        ctaButtons.forEach(button => {\n            // Ultra-smooth click handling with ripple effect\n            button.onClick((event) => {\n                event.preventDefault();\n                console.log('🚀 CTA Button Clicked - Ultra-Smooth Action');\n                \n                // Ultra-smooth click animation\n                button.scale = 0.95;\n                button.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n                \n                setTimeout(() => {\n                    button.scale = 1;\n                    button.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n                \n                // Handle different CTA types with ultra-smooth transitions\n                const buttonText = button.text || button.label || '';\n                \n                if (buttonText.toLowerCase().includes('contact') || buttonText.toLowerCase().includes('touch')) {\n                    ultraSmoothScrollTo('#contact', 80);\n                } else if (buttonText.toLowerCase().includes('service')) {\n                    ultraSmoothScrollTo('#services', 80);\n                } else if (buttonText.toLowerCase().includes('about')) {\n                    ultraSmoothScrollTo('#about', 80);\n                }\n            });\n            \n            // Ultra-smooth hover effects\n            button.onMouseEnter(() => {\n                button.style.transform = 'translateY(-3px) scale(1.05)';\n                button.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            button.onMouseLeave(() => {\n                button.style.transform = 'translateY(0) scale(1)';\n                button.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n        });\n    }\n    \n    // ===== ULTRA-SMOOTH SOCIAL PROOF =====\n    function initializeSocialProof() {\n        const testimonials = $w('.testimonial, .review, [data-testimonial]');\n        if (!testimonials.length) return;\n        \n        // Auto-advance testimonials with ultra-smooth transitions\n        let currentTestimonial = 0;\n        \n        function advanceTestimonial() {\n            testimonials.forEach((testimonial, index) => {\n                if (index === currentTestimonial) {\n                    testimonial.style.opacity = '1';\n                    testimonial.style.transform = 'translateX(0)';\n                    testimonial.style.transition = 'opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1), transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)';\n                } else {\n                    testimonial.style.opacity = '0';\n                    testimonial.style.transform = 'translateX(100px)';\n                    testimonial.style.transition = 'opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1), transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)';\n                }\n            });\n            \n            currentTestimonial = (currentTestimonial + 1) % testimonials.length;\n        }\n        \n        // Initialize testimonials\n        testimonials.forEach(testimonial => {\n            testimonial.style.opacity = '0';\n            testimonial.style.transform = 'translateX(100px)';\n        });\n        \n        // Start auto-advance\n        setTimeout(advanceTestimonial, 1000);\n        setInterval(advanceTestimonial, 5000);\n    }\n    \n    // ===== ULTRA-SMOOTH SCROLL SYSTEM =====\n    function initializeUltraSmoothScroll() {\n        // Ultra-smooth scroll handling with RAF\n        function ultraSmoothScroll() {\n            if (state.scrollRAF) return;\n            \n            state.scrollRAF = requestAnimationFrame(() => {\n                const currentScrollY = window.scrollY;\n                const nav = $w('#navigation') || $w('.nav');\n                \n                // Ultra-smooth navigation background change\n                if (nav && Math.abs(currentScrollY - state.lastScrollY) > 5) {\n                    const opacity = Math.min(currentScrollY / 100, 1);\n                    \n                    if (currentScrollY > 50) {\n                        nav.style.background = `rgba(255, 255, 255, ${opacity * 0.98})`;\n                        nav.style.backdropFilter = `blur(${opacity * 20}px)`;\n                        nav.style.boxShadow = `0 4px 20px rgba(0,0,0,${opacity * 0.1})`;\n                    } else {\n                        nav.style.background = 'rgba(255, 255, 255, 0.95)';\n                        nav.style.backdropFilter = 'blur(10px)';\n                        nav.style.boxShadow = 'none';\n                    }\n                    \n                    state.lastScrollY = currentScrollY;\n                }\n                \n                state.scrollRAF = null;\n            });\n        }\n        \n        // Add scroll listener with passive option for ultra-smooth performance\n        window.addEventListener('scroll', ultraSmoothScroll, { passive: true });\n        \n    }\n    \n    // ===== ULTRA-SMOOTH SCROLL TO FUNCTION =====\n    // Define ultraSmoothScrollTo function globally to avoid build errors\n    function ultraSmoothScrollTo(target, offset = 80) {\n        const element = typeof target === 'string' ? $w(target) : target;\n        if (!element) return;\n        \n        const targetPosition = element.offsetTop - offset;\n        const startPosition = window.pageYOffset;\n        const distance = targetPosition - startPosition;\n        const duration = 1000;\n        let start = null;\n        \n        function animation(currentTime) {\n            if (start === null) start = currentTime;\n            const timeElapsed = currentTime - start;\n            const run = easeInOutCubic(timeElapsed, startPosition, distance, duration);\n            window.scrollTo(0, run);\n            if (timeElapsed < duration) requestAnimationFrame(animation);\n        }\n        \n        function easeInOutCubic(t, b, c, d) {\n            t /= d / 2;\n            if (t < 1) return c / 2 * t * t * t + b;\n            t -= 2;\n            return c / 2 * (t * t * t + 2) + b;\n        }\n        \n        requestAnimationFrame(animation);\n    }\n    \n    // ===== ULTRA-SMOOTH PERFORMANCE MONITORING =====\n    function initializePerformanceMonitoring() {\n        // Performance monitoring with ultra-smooth metrics\n        const performanceMetrics = {\n            loadTime: 0,\n            scrollPerformance: 0,\n            animationFPS: 0\n        };\n        \n        // Monitor scroll performance\n        let scrollCount = 0;\n        let lastScrollTime = performance.now();\n        \n        window.addEventListener('scroll', () => {\n            scrollCount++;\n            const currentTime = performance.now();\n            \n            if (currentTime - lastScrollTime > 1000) {\n                performanceMetrics.scrollPerformance = scrollCount;\n                scrollCount = 0;\n                lastScrollTime = currentTime;\n            }\n        }, { passive: true });\n        \n        // Monitor animation performance\n        let frameCount = 0;\n        let lastFrameTime = performance.now();\n        \n        function monitorAnimationFPS() {\n            frameCount++;\n            const currentTime = performance.now();\n            \n            if (currentTime - lastFrameTime > 1000) {\n                performanceMetrics.animationFPS = frameCount;\n                frameCount = 0;\n                lastFrameTime = currentTime;\n            }\n            \n            requestAnimationFrame(monitorAnimationFPS);\n        }\n        \n        requestAnimationFrame(monitorAnimationFPS);\n        \n        // Log performance metrics\n        window.addEventListener('load', () => {\n            performanceMetrics.loadTime = performance.now();\n            console.log('📊 Performance Metrics:', performanceMetrics);\n        });\n    \n    // ===== MOBILE OPTIMIZATIONS =====\n    function initializeMobileOptimizations() {\n        console.log('📱 Initializing Mobile Optimizations...');\n        \n        // Mobile detection\n        const isMobile = window.innerWidth < 768;\n        const isTouchDevice = 'ontouchstart' in window;\n        \n        // Update state for mobile\n        if (state) {\n            state.isMobile = isMobile;\n            state.isTouchDevice = isTouchDevice;\n        }\n        \n        // Mobile-specific CSS injection\n        injectMobileCSS();\n        \n        // Mobile touch optimizations\n        if (isTouchDevice) {\n            initializeTouchOptimizations();\n        }\n        \n        // Mobile responsive adjustments\n        initializeMobileResponsive();\n        \n        // Mobile performance optimizations\n        initializeMobilePerformance();\n        \n        console.log('✅ Mobile optimizations initialized!');\n    }\n    \n    function injectMobileCSS() {\n        const mobileCSS = `\n            /* Mobile Optimizations */\n            @media (max-width: 768px) {\n                /* Navigation adjustments */\n                .nav, .navigation {\n                    padding: 0.75rem 1rem !important;\n                }\n                \n                .nav-container, .nav-wrapper {\n                    padding: 0 0.5rem !important;\n                }\n                \n                .nav-logo, .logo {\n                    font-size: 1.25rem !important;\n                }\n                \n                /* Hero section mobile fit */\n                .hero, .heroSection {\n                    min-height: 100vh !important;\n                    padding: 1rem !important;\n                    padding-top: 70px !important;\n                    display: flex !important;\n                    align-items: center !important;\n                    justify-content: center !important;\n                }\n                \n                .hero-content, .heroContent {\n                    width: 100% !important;\n                    max-width: 100% !important;\n                    padding: 0 1rem !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.75rem, 6vw, 2.5rem) !important;\n                    line-height: 1.2 !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4vw, 1.125rem) !important;\n                    margin-bottom: 1.5rem !important;\n                }\n                \n                /* Button container mobile fit */\n                .btn-container, .buttonContainer {\n                    flex-direction: column !important;\n                    align-items: center !important;\n                    width: 100% !important;\n                    gap: 0.75rem !important;\n                }\n                \n                .btn, .button {\n                    width: 100% !important;\n                    max-width: 280px !important;\n                    min-height: 48px !important;\n                    padding: 0.875rem 1.5rem !important;\n                    font-size: 1rem !important;\n                    text-align: center !important;\n                    touch-action: manipulation !important;\n                }\n                \n                /* Features section mobile fit */\n                .features, .featuresSection {\n                    padding: 2rem 1rem !important;\n                }\n                \n                .features h2, .featuresTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 2rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: 1fr !important;\n                    gap: 1.25rem !important;\n                    padding: 0 0.5rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1.25rem !important;\n                    margin: 0 !important;\n                }\n                \n                .feature-card h3, .featureCard h3 {\n                    font-size: 1.125rem !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .feature-card p, .featureCard p {\n                    font-size: 0.875rem !important;\n                    line-height: 1.5 !important;\n                }\n            }\n            \n            /* Small mobile devices (iPhone SE, etc.) */\n            @media (max-width: 375px) {\n                .hero, .heroSection {\n                    padding: 0.75rem !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 7vw, 2rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 4.5vw, 1rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 260px !important;\n                    padding: 0.75rem 1.25rem !important;\n                    font-size: 0.875rem !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 0.75rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    gap: 1rem !important;\n                    padding: 0 0.25rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1rem !important;\n                }\n            }\n            \n            /* Medium mobile devices (iPhone 12/13) */\n            @media (min-width: 376px) and (max-width: 428px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(1.875rem, 6.5vw, 2.25rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4.5vw, 1.125rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 300px !important;\n                }\n            }\n            \n            /* Large mobile devices (iPhone Pro Max, etc.) */\n            @media (min-width: 429px) and (max-width: 768px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(2rem, 6vw, 2.5rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(1rem, 4vw, 1.25rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 320px !important;\n                }\n            }\n            \n            /* Landscape mobile optimization */\n            @media (max-width: 768px) and (orientation: landscape) {\n                .hero, .heroSection {\n                    min-height: 85vh !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 0.5rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 3.5vw, 1rem) !important;\n                    margin-bottom: 1rem !important;\n                }\n                \n                .btn-container, .buttonContainer {\n                    flex-direction: row !important;\n                    justify-content: center !important;\n                    gap: 1rem !important;\n                }\n                \n                .btn, .button {\n                    width: auto !important;\n                    max-width: 200px !important;\n                    min-width: 160px !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 1rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) !important;\n                    gap: 1rem !important;\n                }\n            }\n            \n            /* Touch device optimizations */\n            @media (hover: none) and (pointer: coarse) {\n                .btn:hover, .button:hover {\n                    transform: none !important;\n                    box-shadow: none !important;\n                }\n                \n                .nav-link:hover, .navLink:hover {\n                    transform: none !important;\n                }\n                \n                .feature-card:hover, .featureCard:hover {\n                    transform: none !important;\n                }\n                \n                /* Enhanced touch targets */\n                .btn, .button, .nav-link, .navLink {\n                    min-height: 44px !important;\n                    min-width: 44px !important;\n                }\n            }\n            \n            /* Safe area support for notched devices */\n            @supports (padding: max(0px)) {\n                .nav, .navigation {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .hero, .heroSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .features, .featuresSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n            }\n            \n            /* Prevent horizontal scrolling */\n            body {\n                overflow-x: hidden !important;\n                width: 100% !important;\n            }\n            \n            /* Ensure proper container sizing */\n            .nav-container, .nav-wrapper,\n            .hero-content, .heroContent,\n            .features-grid, .featuresGrid {\n                width: 100% !important;\n                max-width: 100% !important;\n                box-sizing: border-box !important;\n            }\n        `;\n        \n        // Inject CSS into head\n        const style = document.createElement('style');\n        style.textContent = mobileCSS;\n        document.head.appendChild(style);\n    }\n    \n    function initializeTouchOptimizations() {\n        // Enhanced touch feedback for buttons\n        const buttons = $w('.btn, .button, [data-testid*=\"button\"]');\n        buttons.forEach(btn => {\n            if (!btn) return;\n            \n            // Touch start effect\n            btn.onTouchStart(() => {\n                btn.style.transform = 'scale(0.95)';\n                btn.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            // Touch end effect\n            btn.onTouchEnd(() => {\n                setTimeout(() => {\n                    btn.style.transform = '';\n                    btn.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Enhanced touch feedback for cards\n        const cards = $w('.feature-card, .featureCard, .card');\n        cards.forEach(card => {\n            if (!card) return;\n            \n            card.onTouchStart(() => {\n                card.style.transform = 'scale(0.98)';\n                card.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            card.onTouchEnd(() => {\n                setTimeout(() => {\n                    card.style.transform = '';\n                    card.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Prevent zoom on double tap\n        let lastTouchEnd = 0;\n        document.addEventListener('touchend', (event) => {\n            const now = (new Date()).getTime();\n            if (now - lastTouchEnd <= 300) {\n                event.preventDefault();\n            }\n            lastTouchEnd = now;\n        }, false);\n    }\n    \n    function initializeMobileResponsive() {\n        // Mobile-specific element adjustments\n        const heroSection = $w('#heroSection') || $w('.hero');\n        if (heroSection && state.isMobile) {\n            // Adjust hero for mobile\n            heroSection.style.minHeight = '100vh';\n            heroSection.style.padding = '1rem';\n            heroSection.style.paddingTop = '70px';\n        }\n        \n        // Mobile navigation adjustments\n        const nav = $w('.nav, .navigation');\n        if (nav && state.isMobile) {\n            nav.style.padding = '0.75rem 1rem';\n        }\n        \n        // Mobile button adjustments\n        const buttons = $w('.btn, .button');\n        buttons.forEach(btn => {\n            if (!btn || !state.isMobile) return;\n            \n            btn.style.width = '100%';\n            btn.style.maxWidth = '280px';\n            btn.style.minHeight = '48px';\n            btn.style.padding = '0.875rem 1.5rem';\n            btn.style.fontSize = '1rem';\n            btn.style.textAlign = 'center';\n            btn.style.touchAction = 'manipulation';\n        });\n    }\n    \n    function initializeMobilePerformance() {\n        // Mobile-specific performance optimizations\n        if (state.isMobile) {\n            // Reduce animation complexity on mobile\n            const animations = $w('[data-animation]');\n            animations.forEach(anim => {\n                if (!anim) return;\n                anim.style.transition = 'opacity 0.3s ease, transform 0.3s ease';\n            });\n            \n            // Optimize scroll performance\n            const scrollElements = $w('.scroll-container, .scrollContainer');\n            scrollElements.forEach(element => {\n                if (!element) return;\n                element.style.willChange = 'transform';\n                element.style.transform = 'translateZ(0)';\n            });\n        }\n    }\n    \n    // Initialize mobile optimizations after page load\n    setTimeout(() => {\n        initializeMobileOptimizations();\n    }, 100);\n}\n    \n    // Initialize the page\n    waitForMasterPage();\n});",
      "description": "Home page with mobile optimizations"
    },
    "testPage1": {
      "filename": "TEST_PAGE_MAIN.i8nzx.js",
      "content": "// Ultra-Smooth Test Page JavaScript - Development and Testing Features\n// Includes: Ultra-smooth scrolling, Enhanced animations, Performance monitoring\n\n$w.onReady(function () {\n    // Test page functionality for development with ultra-smooth performance\n    console.log('Ultra-Smooth Test page loaded - Development mode active');\n    \n    // Performance state management\n    const state = {\n        isMobile: window.innerWidth < 768,\n        isScrolling: false,\n        lastScrollY: 0,\n        scrollRAF: null,\n        performanceMode: 'ultra-smooth'\n    };\n    \n    // Development tools and debugging\n    const debugMode = true;\n    \n    if (debugMode) {\n        // Add debug information to console\n        console.log('Page elements found:', {\n            buttons: $w('button').length,\n            images: $w('img').length,\n            text: $w('text').length,\n            containers: $w('container').length\n        });\n        \n        // Add ultra-smooth click tracking for all interactive elements\n        const interactiveElements = $w('button, link, image');\n        interactiveElements.forEach(element => {\n            element.onClick(() => {\n                console.log('Element clicked:', element.id || element.tagName);\n                \n                // Ultra-smooth click animation\n                element.scale = 0.95;\n                element.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n                \n                setTimeout(() => {\n                    element.scale = 1;\n                    element.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n    }\n    \n    // Ultra-smooth form validation\n    const testForm = $w('#testForm');\n    if (testForm) {\n        testForm.onSubmit((event) => {\n            console.log('Ultra-Smooth Test form submitted');\n            \n            // Ultra-smooth form processing\n            const submitButton = testForm.querySelector('button[type=\"submit\"]');\n            if (submitButton) {\n                const originalText = submitButton.text;\n                submitButton.text = 'Processing...';\n                submitButton.style.opacity = '0.7';\n                \n                setTimeout(() => {\n                    submitButton.text = 'Success!';\n                    submitButton.style.background = '#28a745';\n                    \n                    setTimeout(() => {\n                        submitButton.text = originalText;\n                        submitButton.style.opacity = '1';\n                        submitButton.style.background = '';\n                    }, 2000);\n                }, 1500);\n            }\n            \n            // Add form validation logic here\n            const formData = testForm.value;\n            console.log('Form data:', formData);\n        });\n    }\n    \n    // Ultra-smooth animations and transitions\n    const testElements = $w('.test-element');\n    testElements.forEach(element => {\n        // Add ultra-smooth test animations\n        element.onMouseEnter(() => {\n            element.opacity = 0.8;\n            element.scale = 1.1;\n            element.style.transition = 'opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n        });\n        \n        element.onMouseLeave(() => {\n            element.opacity = 1;\n            element.scale = 1;\n            element.style.transition = 'opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n        });\n    });\n    \n    // Ultra-smooth performance testing\n    const startTime = performance.now();\n    \n    // Simulate some heavy operations for testing with ultra-smooth feedback\n    setTimeout(() => {\n        const endTime = performance.now();\n        console.log(`Ultra-Smooth Page load performance: ${endTime - startTime}ms`);\n        \n        // Ultra-smooth performance indicator\n        const performanceIndicator = document.createElement('div');\n        performanceIndicator.textContent = `Load Time: ${(endTime - startTime).toFixed(2)}ms`;\n        performanceIndicator.style.cssText = `\n            position: fixed;\n            top: 10px;\n            right: 10px;\n            background: #28a745;\n            color: white;\n            padding: 8px 12px;\n            border-radius: 4px;\n            font-size: 12px;\n            z-index: 10000;\n            opacity: 0;\n            transform: translateX(100%);\n            transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n        `;\n        \n        document.body.appendChild(performanceIndicator);\n        \n        setTimeout(() => {\n            performanceIndicator.style.opacity = '1';\n            performanceIndicator.style.transform = 'translateX(0)';\n        }, 100);\n        \n        setTimeout(() => {\n            performanceIndicator.style.opacity = '0';\n            performanceIndicator.style.transform = 'translateX(100%)';\n            setTimeout(() => {\n                if (document.body.contains(performanceIndicator)) {\n                    document.body.removeChild(performanceIndicator);\n                }\n            }, 500);\n        }, 3000);\n    }, 1000);\n    \n    // Ultra-smooth responsive behavior\n    const testResponsive = () => {\n        const isMobile = window.innerWidth < 768;\n        console.log('Ultra-Smooth Responsive test - Mobile:', isMobile);\n        \n        // Adjust elements based on screen size with ultra-smooth transitions\n        const responsiveElements = $w('.responsive');\n        responsiveElements.forEach(element => {\n            if (isMobile) {\n                element.fontSize = '14px';\n            } else {\n                element.fontSize = '16px';\n            }\n            element.style.transition = 'font-size 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n        });\n    };\n    \n    // Test on load and resize with ultra-smooth handling\n    testResponsive();\n    window.addEventListener('resize', () => {\n        // Debounce resize events for ultra-smooth performance\n        clearTimeout(state.resizeTimeout);\n        state.resizeTimeout = setTimeout(testResponsive, 250);\n    });\n    \n    // Ultra-smooth scroll system\n    function initializeUltraSmoothScroll() {\n        function ultraSmoothScroll() {\n            if (state.scrollRAF) return;\n            \n            state.scrollRAF = requestAnimationFrame(() => {\n                const currentScrollY = window.scrollY;\n                \n                // Ultra-smooth scroll-based animations\n                if (Math.abs(currentScrollY - state.lastScrollY) > 5) {\n                    const scrollElements = $w('.scroll-animate');\n                    scrollElements.forEach(element => {\n                        const rect = element.getBoundingClientRect();\n                        const isVisible = rect.top < window.innerHeight && rect.bottom > 0;\n                        \n                        if (isVisible) {\n                            const progress = (window.innerHeight - rect.top) / (window.innerHeight + rect.height);\n                            element.style.opacity = Math.min(progress * 2, 1);\n                            element.style.transform = `translateY(${Math.max(0, (1 - progress) * 20)}px)`;\n                        }\n                    });\n                    \n                    state.lastScrollY = currentScrollY;\n                }\n                \n                state.scrollRAF = null;\n            });\n        }\n        \n        window.addEventListener('scroll', ultraSmoothScroll, { passive: true });\n    \n    // ===== MOBILE OPTIMIZATIONS =====\n    function initializeMobileOptimizations() {\n        console.log('📱 Initializing Mobile Optimizations...');\n        \n        // Mobile detection\n        const isMobile = window.innerWidth < 768;\n        const isTouchDevice = 'ontouchstart' in window;\n        \n        // Update state for mobile\n        if (state) {\n            state.isMobile = isMobile;\n            state.isTouchDevice = isTouchDevice;\n        }\n        \n        // Mobile-specific CSS injection\n        injectMobileCSS();\n        \n        // Mobile touch optimizations\n        if (isTouchDevice) {\n            initializeTouchOptimizations();\n        }\n        \n        // Mobile responsive adjustments\n        initializeMobileResponsive();\n        \n        // Mobile performance optimizations\n        initializeMobilePerformance();\n        \n        console.log('✅ Mobile optimizations initialized!');\n    }\n    \n    function injectMobileCSS() {\n        const mobileCSS = `\n            /* Mobile Optimizations */\n            @media (max-width: 768px) {\n                /* Navigation adjustments */\n                .nav, .navigation {\n                    padding: 0.75rem 1rem !important;\n                }\n                \n                .nav-container, .nav-wrapper {\n                    padding: 0 0.5rem !important;\n                }\n                \n                .nav-logo, .logo {\n                    font-size: 1.25rem !important;\n                }\n                \n                /* Hero section mobile fit */\n                .hero, .heroSection {\n                    min-height: 100vh !important;\n                    padding: 1rem !important;\n                    padding-top: 70px !important;\n                    display: flex !important;\n                    align-items: center !important;\n                    justify-content: center !important;\n                }\n                \n                .hero-content, .heroContent {\n                    width: 100% !important;\n                    max-width: 100% !important;\n                    padding: 0 1rem !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.75rem, 6vw, 2.5rem) !important;\n                    line-height: 1.2 !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4vw, 1.125rem) !important;\n                    margin-bottom: 1.5rem !important;\n                }\n                \n                /* Button container mobile fit */\n                .btn-container, .buttonContainer {\n                    flex-direction: column !important;\n                    align-items: center !important;\n                    width: 100% !important;\n                    gap: 0.75rem !important;\n                }\n                \n                .btn, .button {\n                    width: 100% !important;\n                    max-width: 280px !important;\n                    min-height: 48px !important;\n                    padding: 0.875rem 1.5rem !important;\n                    font-size: 1rem !important;\n                    text-align: center !important;\n                    touch-action: manipulation !important;\n                }\n                \n                /* Features section mobile fit */\n                .features, .featuresSection {\n                    padding: 2rem 1rem !important;\n                }\n                \n                .features h2, .featuresTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 2rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: 1fr !important;\n                    gap: 1.25rem !important;\n                    padding: 0 0.5rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1.25rem !important;\n                    margin: 0 !important;\n                }\n                \n                .feature-card h3, .featureCard h3 {\n                    font-size: 1.125rem !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .feature-card p, .featureCard p {\n                    font-size: 0.875rem !important;\n                    line-height: 1.5 !important;\n                }\n            }\n            \n            /* Small mobile devices (iPhone SE, etc.) */\n            @media (max-width: 375px) {\n                .hero, .heroSection {\n                    padding: 0.75rem !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 7vw, 2rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 4.5vw, 1rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 260px !important;\n                    padding: 0.75rem 1.25rem !important;\n                    font-size: 0.875rem !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 0.75rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    gap: 1rem !important;\n                    padding: 0 0.25rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1rem !important;\n                }\n            }\n            \n            /* Medium mobile devices (iPhone 12/13) */\n            @media (min-width: 376px) and (max-width: 428px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(1.875rem, 6.5vw, 2.25rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4.5vw, 1.125rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 300px !important;\n                }\n            }\n            \n            /* Large mobile devices (iPhone Pro Max, etc.) */\n            @media (min-width: 429px) and (max-width: 768px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(2rem, 6vw, 2.5rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(1rem, 4vw, 1.25rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 320px !important;\n                }\n            }\n            \n            /* Landscape mobile optimization */\n            @media (max-width: 768px) and (orientation: landscape) {\n                .hero, .heroSection {\n                    min-height: 85vh !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 0.5rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 3.5vw, 1rem) !important;\n                    margin-bottom: 1rem !important;\n                }\n                \n                .btn-container, .buttonContainer {\n                    flex-direction: row !important;\n                    justify-content: center !important;\n                    gap: 1rem !important;\n                }\n                \n                .btn, .button {\n                    width: auto !important;\n                    max-width: 200px !important;\n                    min-width: 160px !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 1rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) !important;\n                    gap: 1rem !important;\n                }\n            }\n            \n            /* Touch device optimizations */\n            @media (hover: none) and (pointer: coarse) {\n                .btn:hover, .button:hover {\n                    transform: none !important;\n                    box-shadow: none !important;\n                }\n                \n                .nav-link:hover, .navLink:hover {\n                    transform: none !important;\n                }\n                \n                .feature-card:hover, .featureCard:hover {\n                    transform: none !important;\n                }\n                \n                /* Enhanced touch targets */\n                .btn, .button, .nav-link, .navLink {\n                    min-height: 44px !important;\n                    min-width: 44px !important;\n                }\n            }\n            \n            /* Safe area support for notched devices */\n            @supports (padding: max(0px)) {\n                .nav, .navigation {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .hero, .heroSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .features, .featuresSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n            }\n            \n            /* Prevent horizontal scrolling */\n            body {\n                overflow-x: hidden !important;\n                width: 100% !important;\n            }\n            \n            /* Ensure proper container sizing */\n            .nav-container, .nav-wrapper,\n            .hero-content, .heroContent,\n            .features-grid, .featuresGrid {\n                width: 100% !important;\n                max-width: 100% !important;\n                box-sizing: border-box !important;\n            }\n        `;\n        \n        // Inject CSS into head\n        const style = document.createElement('style');\n        style.textContent = mobileCSS;\n        document.head.appendChild(style);\n    }\n    \n    function initializeTouchOptimizations() {\n        // Enhanced touch feedback for buttons\n        const buttons = $w('.btn, .button, [data-testid*=\"button\"]');\n        buttons.forEach(btn => {\n            if (!btn) return;\n            \n            // Touch start effect\n            btn.onTouchStart(() => {\n                btn.style.transform = 'scale(0.95)';\n                btn.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            // Touch end effect\n            btn.onTouchEnd(() => {\n                setTimeout(() => {\n                    btn.style.transform = '';\n                    btn.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Enhanced touch feedback for cards\n        const cards = $w('.feature-card, .featureCard, .card');\n        cards.forEach(card => {\n            if (!card) return;\n            \n            card.onTouchStart(() => {\n                card.style.transform = 'scale(0.98)';\n                card.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            card.onTouchEnd(() => {\n                setTimeout(() => {\n                    card.style.transform = '';\n                    card.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Prevent zoom on double tap\n        let lastTouchEnd = 0;\n        document.addEventListener('touchend', (event) => {\n            const now = (new Date()).getTime();\n            if (now - lastTouchEnd <= 300) {\n                event.preventDefault();\n            }\n            lastTouchEnd = now;\n        }, false);\n    }\n    \n    function initializeMobileResponsive() {\n        // Mobile-specific element adjustments\n        const heroSection = $w('#heroSection') || $w('.hero');\n        if (heroSection && state.isMobile) {\n            // Adjust hero for mobile\n            heroSection.style.minHeight = '100vh';\n            heroSection.style.padding = '1rem';\n            heroSection.style.paddingTop = '70px';\n        }\n        \n        // Mobile navigation adjustments\n        const nav = $w('.nav, .navigation');\n        if (nav && state.isMobile) {\n            nav.style.padding = '0.75rem 1rem';\n        }\n        \n        // Mobile button adjustments\n        const buttons = $w('.btn, .button');\n        buttons.forEach(btn => {\n            if (!btn || !state.isMobile) return;\n            \n            btn.style.width = '100%';\n            btn.style.maxWidth = '280px';\n            btn.style.minHeight = '48px';\n            btn.style.padding = '0.875rem 1.5rem';\n            btn.style.fontSize = '1rem';\n            btn.style.textAlign = 'center';\n            btn.style.touchAction = 'manipulation';\n        });\n    }\n    \n    function initializeMobilePerformance() {\n        // Mobile-specific performance optimizations\n        if (state.isMobile) {\n            // Reduce animation complexity on mobile\n            const animations = $w('[data-animation]');\n            animations.forEach(anim => {\n                if (!anim) return;\n                anim.style.transition = 'opacity 0.3s ease, transform 0.3s ease';\n            });\n            \n            // Optimize scroll performance\n            const scrollElements = $w('.scroll-container, .scrollContainer');\n            scrollElements.forEach(element => {\n                if (!element) return;\n                element.style.willChange = 'transform';\n                element.style.transform = 'translateZ(0)';\n            });\n        }\n    }\n    \n    // Initialize mobile optimizations after page load\n    setTimeout(() => {\n        initializeMobileOptimizations();\n    }, 100);\n}\n    \n    // Initialize ultra-smooth scroll system\n    initializeUltraSmoothScroll();\n    \n    console.log('Ultra-Smooth Test page initialization complete');\n});",
      "description": "Test page 1 with mobile optimizations"
    },
    "testPage2": {
      "filename": "TEST_TEST.a1699.js",
      "content": "// Ultra-Smooth Additional Test Page JavaScript - Comprehensive Testing\n// Includes: Ultra-smooth scrolling, Enhanced animations, Performance monitoring, Accessibility\n\n$w.onReady(function () {\n    // Comprehensive testing functionality with ultra-smooth performance\n    console.log('Ultra-Smooth Additional test page loaded - Comprehensive testing active');\n    \n    // Performance state management\n    const state = {\n        isMobile: window.innerWidth < 768,\n        isScrolling: false,\n        lastScrollY: 0,\n        scrollRAF: null,\n        performanceMode: 'ultra-smooth',\n        testState: {\n            counter: 0,\n            lastAction: null\n        }\n    };\n    \n    // Test different Wix Velo features with ultra-smooth performance\n    const testWixFeatures = () => {\n        // Test dynamic content loading with ultra-smooth transitions\n        const dynamicContainer = $w('#dynamicContent');\n        if (dynamicContainer) {\n            // Simulate dynamic content loading with ultra-smooth animation\n            setTimeout(() => {\n                const contentElement = dynamicContainer.children[0];\n                if (contentElement) {\n                    contentElement.style.opacity = '0';\n                    contentElement.style.transform = 'translateY(20px)';\n                    contentElement.style.transition = 'opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1), transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)';\n                    \n                    contentElement.text = 'Ultra-Smooth Dynamic content loaded successfully!';\n                    \n                    setTimeout(() => {\n                        contentElement.style.opacity = '1';\n                        contentElement.style.transform = 'translateY(0)';\n                    }, 100);\n                }\n            }, 2000);\n        }\n        \n        // Test counter functionality with ultra-smooth animations\n        const counterButton = $w('#counterButton');\n        const counterDisplay = $w('#counterDisplay');\n        \n        if (counterButton && counterDisplay) {\n            counterButton.onClick(() => {\n                state.testState.counter++;\n                state.testState.lastAction = 'increment';\n                \n                // Ultra-smooth counter animation\n                counterButton.scale = 0.95;\n                counterButton.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n                \n                setTimeout(() => {\n                    counterButton.scale = 1;\n                    counterButton.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n                \n                // Ultra-smooth counter display update\n                counterDisplay.style.transform = 'scale(1.1)';\n                counterDisplay.style.transition = 'transform 0.2s cubic-bezier(0.4, 0, 0.2, 1)';\n                counterDisplay.text = `Count: ${state.testState.counter}`;\n                \n                setTimeout(() => {\n                    counterDisplay.style.transform = 'scale(1)';\n                }, 200);\n                \n                console.log('Ultra-Smooth Counter updated:', state.testState);\n            });\n        }\n        \n        // Test data binding with ultra-smooth feedback\n        const dataElements = $w('.data-bound');\n        dataElements.forEach(element => {\n            element.onChange((event) => {\n                console.log('Ultra-Smooth Data changed:', event.target.value);\n                \n                // Ultra-smooth validation feedback\n                element.style.borderColor = '#28a745';\n                element.style.transition = 'border-color 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                \n                setTimeout(() => {\n                    element.style.borderColor = '';\n                }, 1000);\n            });\n        });\n    };\n    \n    // Test user interactions with ultra-smooth performance\n    const testUserInteractions = () => {\n        // Test ultra-smooth hover effects\n        const hoverElements = $w('.hover-effect');\n        hoverElements.forEach(element => {\n            element.onMouseEnter(() => {\n                element.style.transform = 'translateY(-8px) scale(1.02)';\n                element.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                element.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';\n            });\n            \n            element.onMouseLeave(() => {\n                element.style.transform = 'translateY(0) scale(1)';\n                element.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                element.style.boxShadow = '0 4px 15px rgba(0,0,0,0.1)';\n            });\n        });\n        \n        // Test ultra-smooth keyboard navigation\n        document.addEventListener('keydown', (event) => {\n            console.log('Ultra-Smooth Key pressed:', event.key);\n            \n            // Test keyboard shortcuts with ultra-smooth feedback\n            if (event.ctrlKey && event.key === 't') {\n                console.log('Ultra-Smooth Test shortcut triggered');\n                \n                // Ultra-smooth visual feedback\n                const feedback = document.createElement('div');\n                feedback.textContent = 'Test Shortcut Activated!';\n                feedback.style.cssText = `\n                    position: fixed;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    background: #667eea;\n                    color: white;\n                    padding: 15px 25px;\n                    border-radius: 8px;\n                    font-size: 16px;\n                    z-index: 10000;\n                    opacity: 0;\n                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n                `;\n                \n                document.body.appendChild(feedback);\n                \n                setTimeout(() => {\n                    feedback.style.opacity = '1';\n                }, 100);\n                \n                setTimeout(() => {\n                    feedback.style.opacity = '0';\n                    setTimeout(() => {\n                        if (document.body.contains(feedback)) {\n                            document.body.removeChild(feedback);\n                        }\n                    }, 300);\n                }, 2000);\n            }\n        });\n        \n        // Test ultra-smooth touch events for mobile\n        const touchElements = $w('.touch-enabled');\n        touchElements.forEach(element => {\n            element.onTouchStart(() => {\n                console.log('Ultra-Smooth Touch started on:', element.id);\n                \n                // Ultra-smooth touch feedback\n                element.style.transform = 'scale(0.95)';\n                element.style.transition = 'transform 0.1s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            element.onTouchEnd(() => {\n                element.style.transform = 'scale(1)';\n                element.style.transition = 'transform 0.2s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n        });\n    };\n    \n    // Test ultra-smooth performance and optimization\n    const testPerformance = () => {\n        // Monitor memory usage with ultra-smooth tracking\n        if (performance.memory) {\n            console.log('Ultra-Smooth Memory usage:', {\n                used: performance.memory.usedJSHeapSize,\n                total: performance.memory.totalJSHeapSize,\n                limit: performance.memory.jsHeapSizeLimit\n            });\n        }\n        \n        // Test ultra-smooth image loading performance\n        const images = $w('img');\n        images.forEach(img => {\n            img.onLoad(() => {\n                console.log('Ultra-Smooth Image loaded:', img.src);\n                \n                // Ultra-smooth image entrance animation\n                img.style.opacity = '0';\n                img.style.transform = 'scale(0.95)';\n                img.style.transition = 'opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1), transform 0.6s cubic-bezier(0.4, 0, 0.2, 1)';\n                \n                setTimeout(() => {\n                    img.style.opacity = '1';\n                    img.style.transform = 'scale(1)';\n                }, 100);\n            });\n            \n            img.onError(() => {\n                console.error('Ultra-Smooth Image failed to load:', img.src);\n                \n                // Ultra-smooth error feedback\n                img.style.opacity = '0.5';\n                img.style.filter = 'grayscale(100%)';\n            });\n        });\n        \n        // Monitor ultra-smooth scroll performance\n        let scrollCount = 0;\n        let lastScrollTime = performance.now();\n        \n        window.addEventListener('scroll', () => {\n            scrollCount++;\n            const currentTime = performance.now();\n            \n            if (currentTime - lastScrollTime > 1000) {\n                console.log(`Ultra-Smooth Scroll events per second: ${scrollCount}`);\n                scrollCount = 0;\n                lastScrollTime = currentTime;\n            }\n        }, { passive: true });\n    };\n    \n    // Test ultra-smooth accessibility features\n    const testAccessibility = () => {\n        // Test focus management with ultra-smooth transitions\n        const focusableElements = $w('button, a, input, textarea, select');\n        focusableElements.forEach(element => {\n            element.onFocus(() => {\n                element.style.outline = '2px solid #667eea';\n                element.style.outlineOffset = '2px';\n                element.style.transition = 'outline 0.2s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            element.onBlur(() => {\n                element.style.outline = '';\n                element.style.outlineOffset = '';\n            });\n        });\n        \n        // Test ultra-smooth screen reader announcements\n        const announceToScreenReader = (message) => {\n            const announcement = document.createElement('div');\n            announcement.setAttribute('aria-live', 'polite');\n            announcement.setAttribute('aria-atomic', 'true');\n            announcement.style.cssText = `\n                position: absolute;\n                left: -10000px;\n                width: 1px;\n                height: 1px;\n                overflow: hidden;\n            `;\n            announcement.textContent = message;\n            \n            document.body.appendChild(announcement);\n            \n            setTimeout(() => {\n                if (document.body.contains(announcement)) {\n                    document.body.removeChild(announcement);\n                }\n            }, 1000);\n        };\n        \n        // Test ultra-smooth color contrast\n        const testColorContrast = () => {\n            const textElements = $w('text, p, h1, h2, h3, h4, h5, h6');\n            textElements.forEach(element => {\n                const computedStyle = window.getComputedStyle(element);\n                const color = computedStyle.color;\n                const backgroundColor = computedStyle.backgroundColor;\n                \n                // Simple contrast check (in real implementation, use a proper contrast library)\n                console.log(`Ultra-Smooth Color contrast for ${element.id}:`, { color, backgroundColor });\n            });\n        };\n        \n        testColorContrast();\n    };\n    \n    // Initialize ultra-smooth scroll system\n    function initializeUltraSmoothScroll() {\n        function ultraSmoothScroll() {\n            if (state.scrollRAF) return;\n            \n            state.scrollRAF = requestAnimationFrame(() => {\n                const currentScrollY = window.scrollY;\n                \n                // Ultra-smooth scroll-based animations\n                if (Math.abs(currentScrollY - state.lastScrollY) > 5) {\n                    const scrollElements = $w('.scroll-animate, .parallax');\n                    scrollElements.forEach(element => {\n                        const rect = element.getBoundingClientRect();\n                        const isVisible = rect.top < window.innerHeight && rect.bottom > 0;\n                        \n                        if (isVisible) {\n                            const progress = (window.innerHeight - rect.top) / (window.innerHeight + rect.height);\n                            const opacity = Math.min(progress * 2, 1);\n                            const translateY = Math.max(0, (1 - progress) * 30);\n                            \n                            element.style.opacity = opacity;\n                            element.style.transform = `translateY(${translateY}px)`;\n                            element.style.transition = 'opacity 0.1s cubic-bezier(0.4, 0, 0.2, 1), transform 0.1s cubic-bezier(0.4, 0, 0.2, 1)';\n                        }\n                    });\n                    \n                    state.lastScrollY = currentScrollY;\n                }\n                \n                state.scrollRAF = null;\n            });\n        }\n        \n        window.addEventListener('scroll', ultraSmoothScroll, { passive: true });\n    \n    // ===== MOBILE OPTIMIZATIONS =====\n    function initializeMobileOptimizations() {\n        console.log('📱 Initializing Mobile Optimizations...');\n        \n        // Mobile detection\n        const isMobile = window.innerWidth < 768;\n        const isTouchDevice = 'ontouchstart' in window;\n        \n        // Update state for mobile\n        if (state) {\n            state.isMobile = isMobile;\n            state.isTouchDevice = isTouchDevice;\n        }\n        \n        // Mobile-specific CSS injection\n        injectMobileCSS();\n        \n        // Mobile touch optimizations\n        if (isTouchDevice) {\n            initializeTouchOptimizations();\n        }\n        \n        // Mobile responsive adjustments\n        initializeMobileResponsive();\n        \n        // Mobile performance optimizations\n        initializeMobilePerformance();\n        \n        console.log('✅ Mobile optimizations initialized!');\n    }\n    \n    function injectMobileCSS() {\n        const mobileCSS = `\n            /* Mobile Optimizations */\n            @media (max-width: 768px) {\n                /* Navigation adjustments */\n                .nav, .navigation {\n                    padding: 0.75rem 1rem !important;\n                }\n                \n                .nav-container, .nav-wrapper {\n                    padding: 0 0.5rem !important;\n                }\n                \n                .nav-logo, .logo {\n                    font-size: 1.25rem !important;\n                }\n                \n                /* Hero section mobile fit */\n                .hero, .heroSection {\n                    min-height: 100vh !important;\n                    padding: 1rem !important;\n                    padding-top: 70px !important;\n                    display: flex !important;\n                    align-items: center !important;\n                    justify-content: center !important;\n                }\n                \n                .hero-content, .heroContent {\n                    width: 100% !important;\n                    max-width: 100% !important;\n                    padding: 0 1rem !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.75rem, 6vw, 2.5rem) !important;\n                    line-height: 1.2 !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4vw, 1.125rem) !important;\n                    margin-bottom: 1.5rem !important;\n                }\n                \n                /* Button container mobile fit */\n                .btn-container, .buttonContainer {\n                    flex-direction: column !important;\n                    align-items: center !important;\n                    width: 100% !important;\n                    gap: 0.75rem !important;\n                }\n                \n                .btn, .button {\n                    width: 100% !important;\n                    max-width: 280px !important;\n                    min-height: 48px !important;\n                    padding: 0.875rem 1.5rem !important;\n                    font-size: 1rem !important;\n                    text-align: center !important;\n                    touch-action: manipulation !important;\n                }\n                \n                /* Features section mobile fit */\n                .features, .featuresSection {\n                    padding: 2rem 1rem !important;\n                }\n                \n                .features h2, .featuresTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 2rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: 1fr !important;\n                    gap: 1.25rem !important;\n                    padding: 0 0.5rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1.25rem !important;\n                    margin: 0 !important;\n                }\n                \n                .feature-card h3, .featureCard h3 {\n                    font-size: 1.125rem !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .feature-card p, .featureCard p {\n                    font-size: 0.875rem !important;\n                    line-height: 1.5 !important;\n                }\n            }\n            \n            /* Small mobile devices (iPhone SE, etc.) */\n            @media (max-width: 375px) {\n                .hero, .heroSection {\n                    padding: 0.75rem !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 7vw, 2rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 4.5vw, 1rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 260px !important;\n                    padding: 0.75rem 1.25rem !important;\n                    font-size: 0.875rem !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 0.75rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    gap: 1rem !important;\n                    padding: 0 0.25rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1rem !important;\n                }\n            }\n            \n            /* Medium mobile devices (iPhone 12/13) */\n            @media (min-width: 376px) and (max-width: 428px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(1.875rem, 6.5vw, 2.25rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4.5vw, 1.125rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 300px !important;\n                }\n            }\n            \n            /* Large mobile devices (iPhone Pro Max, etc.) */\n            @media (min-width: 429px) and (max-width: 768px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(2rem, 6vw, 2.5rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(1rem, 4vw, 1.25rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 320px !important;\n                }\n            }\n            \n            /* Landscape mobile optimization */\n            @media (max-width: 768px) and (orientation: landscape) {\n                .hero, .heroSection {\n                    min-height: 85vh !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 0.5rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 3.5vw, 1rem) !important;\n                    margin-bottom: 1rem !important;\n                }\n                \n                .btn-container, .buttonContainer {\n                    flex-direction: row !important;\n                    justify-content: center !important;\n                    gap: 1rem !important;\n                }\n                \n                .btn, .button {\n                    width: auto !important;\n                    max-width: 200px !important;\n                    min-width: 160px !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 1rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) !important;\n                    gap: 1rem !important;\n                }\n            }\n            \n            /* Touch device optimizations */\n            @media (hover: none) and (pointer: coarse) {\n                .btn:hover, .button:hover {\n                    transform: none !important;\n                    box-shadow: none !important;\n                }\n                \n                .nav-link:hover, .navLink:hover {\n                    transform: none !important;\n                }\n                \n                .feature-card:hover, .featureCard:hover {\n                    transform: none !important;\n                }\n                \n                /* Enhanced touch targets */\n                .btn, .button, .nav-link, .navLink {\n                    min-height: 44px !important;\n                    min-width: 44px !important;\n                }\n            }\n            \n            /* Safe area support for notched devices */\n            @supports (padding: max(0px)) {\n                .nav, .navigation {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .hero, .heroSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .features, .featuresSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n            }\n            \n            /* Prevent horizontal scrolling */\n            body {\n                overflow-x: hidden !important;\n                width: 100% !important;\n            }\n            \n            /* Ensure proper container sizing */\n            .nav-container, .nav-wrapper,\n            .hero-content, .heroContent,\n            .features-grid, .featuresGrid {\n                width: 100% !important;\n                max-width: 100% !important;\n                box-sizing: border-box !important;\n            }\n        `;\n        \n        // Inject CSS into head\n        const style = document.createElement('style');\n        style.textContent = mobileCSS;\n        document.head.appendChild(style);\n    }\n    \n    function initializeTouchOptimizations() {\n        // Enhanced touch feedback for buttons\n        const buttons = $w('.btn, .button, [data-testid*=\"button\"]');\n        buttons.forEach(btn => {\n            if (!btn) return;\n            \n            // Touch start effect\n            btn.onTouchStart(() => {\n                btn.style.transform = 'scale(0.95)';\n                btn.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            // Touch end effect\n            btn.onTouchEnd(() => {\n                setTimeout(() => {\n                    btn.style.transform = '';\n                    btn.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Enhanced touch feedback for cards\n        const cards = $w('.feature-card, .featureCard, .card');\n        cards.forEach(card => {\n            if (!card) return;\n            \n            card.onTouchStart(() => {\n                card.style.transform = 'scale(0.98)';\n                card.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            card.onTouchEnd(() => {\n                setTimeout(() => {\n                    card.style.transform = '';\n                    card.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Prevent zoom on double tap\n        let lastTouchEnd = 0;\n        document.addEventListener('touchend', (event) => {\n            const now = (new Date()).getTime();\n            if (now - lastTouchEnd <= 300) {\n                event.preventDefault();\n            }\n            lastTouchEnd = now;\n        }, false);\n    }\n    \n    function initializeMobileResponsive() {\n        // Mobile-specific element adjustments\n        const heroSection = $w('#heroSection') || $w('.hero');\n        if (heroSection && state.isMobile) {\n            // Adjust hero for mobile\n            heroSection.style.minHeight = '100vh';\n            heroSection.style.padding = '1rem';\n            heroSection.style.paddingTop = '70px';\n        }\n        \n        // Mobile navigation adjustments\n        const nav = $w('.nav, .navigation');\n        if (nav && state.isMobile) {\n            nav.style.padding = '0.75rem 1rem';\n        }\n        \n        // Mobile button adjustments\n        const buttons = $w('.btn, .button');\n        buttons.forEach(btn => {\n            if (!btn || !state.isMobile) return;\n            \n            btn.style.width = '100%';\n            btn.style.maxWidth = '280px';\n            btn.style.minHeight = '48px';\n            btn.style.padding = '0.875rem 1.5rem';\n            btn.style.fontSize = '1rem';\n            btn.style.textAlign = 'center';\n            btn.style.touchAction = 'manipulation';\n        });\n    }\n    \n    function initializeMobilePerformance() {\n        // Mobile-specific performance optimizations\n        if (state.isMobile) {\n            // Reduce animation complexity on mobile\n            const animations = $w('[data-animation]');\n            animations.forEach(anim => {\n                if (!anim) return;\n                anim.style.transition = 'opacity 0.3s ease, transform 0.3s ease';\n            });\n            \n            // Optimize scroll performance\n            const scrollElements = $w('.scroll-container, .scrollContainer');\n            scrollElements.forEach(element => {\n                if (!element) return;\n                element.style.willChange = 'transform';\n                element.style.transform = 'translateZ(0)';\n            });\n        }\n    }\n    \n    // Initialize mobile optimizations after page load\n    setTimeout(() => {\n        initializeMobileOptimizations();\n    }, 100);\n}\n    \n    // Initialize all ultra-smooth test features\n    testWixFeatures();\n    testUserInteractions();\n    testPerformance();\n    testAccessibility();\n    initializeUltraSmoothScroll();\n    \n    console.log('Ultra-Smooth Comprehensive test page initialization complete');\n});",
      "description": "Test page 2 with mobile optimizations"
    },
    "masterPage": {
      "filename": "masterPage.js",
      "content": "// ULTRA-SMOOTH WIX SITE - Master Page with Butter-Smooth Performance\n// Includes: Ultra-smooth scrolling, Enhanced animations, Mobile optimization, Performance monitoring\n\n$w.onReady(function () {\n    console.log('🚀 Ultra-Fast Master Page Loading...');\n    \n    // ===== PERFORMANCE STATE MANAGEMENT =====\n    const state = {\n        isMobile: window.innerWidth < 768,\n        isMenuOpen: false,\n        isLoaded: false,\n        scrollY: 0,\n        lastScrollTime: 0,\n        performanceMode: 'ultra-fast'\n    };\n    \n    // ===== ELEMENT CACHE FOR ULTRA-FAST ACCESS =====\n    const elements = new Map();\n    \n    function getElement(selector) {\n        if (!elements.has(selector)) {\n            const element = $w(selector);\n            if (element) {\n                elements.set(selector, element);\n            }\n        }\n        return elements.get(selector);\n    }\n    \n    // ===== ULTRA-FAST MOBILE MENU SYSTEM =====\n    function toggleMobileMenu() {\n        const menu = getElement('#navMenu');\n        const toggle = getElement('#navMenuToggle');\n        const overlay = getElement('#mobileOverlay');\n        \n        if (!menu || !toggle) return;\n        \n        state.isMenuOpen = !state.isMenuOpen;\n        \n        if (state.isMenuOpen) {\n            // Ultra-fast menu open\n            menu.expand();\n            toggle.expand();\n            if (overlay) overlay.expand();\n            \n            // Prevent body scroll\n            document.body.style.overflow = 'hidden';\n        } else {\n            // Ultra-fast menu close\n            menu.collapse();\n            toggle.collapse();\n            if (overlay) overlay.collapse();\n            \n            // Restore body scroll\n            document.body.style.overflow = '';\n        }\n    }\n    \n    // ===== ULTRA-SMOOTH SCROLL SYSTEM =====\n    let scrollRAF = null;\n    let lastScrollY = 0;\n    \n    function ultraSmoothScroll() {\n        if (scrollRAF) return;\n        \n        scrollRAF = requestAnimationFrame(() => {\n            const currentScrollY = window.scrollY;\n            const nav = getElement('#navigation');\n            \n            if (nav && Math.abs(currentScrollY - lastScrollY) > 5) {\n                // Ultra-smooth nav background transition\n                const opacity = Math.min(currentScrollY / 100, 1);\n                const backgroundColor = `rgba(255, 255, 255, ${opacity * 0.95})`;\n                \n                nav.style.backgroundColor = backgroundColor;\n                nav.style.backdropFilter = `blur(${opacity * 10}px)`;\n                \n                // Add shadow for depth\n                if (opacity > 0.1) {\n                    nav.style.boxShadow = `0 2px 20px rgba(0,0,0,${opacity * 0.1})`;\n                } else {\n                    nav.style.boxShadow = 'none';\n                }\n                \n                lastScrollY = currentScrollY;\n            }\n            \n            scrollRAF = null;\n        });\n    }\n    \n    // ===== ULTRA-FAST SCROLL TO ELEMENT =====\n    function ultraFastScrollTo(target, offset = 80) {\n        const element = typeof target === 'string' ? getElement(target) : target;\n        if (!element) return;\n        \n        // Use Wix's optimized scrollTo with custom offset\n        element.scrollTo();\n        \n        // Additional smooth behavior for better UX\n        setTimeout(() => {\n            const elementTop = element.offsetTop - offset;\n            window.scrollTo({\n                top: elementTop,\n                behavior: 'smooth'\n            });\n        }, 50);\n    }\n    \n    // ===== ULTRA-FAST IMAGE OPTIMIZATION =====\n    function optimizeImages() {\n        const images = $w('img');\n        images.forEach(img => {\n            // Add loading=\"lazy\" for better performance\n            if (img.loading !== 'lazy') {\n                img.loading = 'lazy';\n            }\n            \n            // Add error handling\n            img.onError(() => {\n                console.warn('Image failed to load:', img.src);\n                // Could add fallback image here\n            });\n        });\n    }\n    \n    // ===== ULTRA-FAST BUTTON INTERACTIONS =====\n    function initializeButtons() {\n        const buttons = $w('button, .btn, .cta-button');\n        buttons.forEach(button => {\n            // Ultra-fast hover effects\n            button.onMouseIn(() => {\n                button.scale = 1.02;\n                button.style.transition = 'transform 0.1s ease';\n            });\n            \n            button.onMouseOut(() => {\n                button.scale = 1;\n            });\n            \n            // Ultra-fast click effects\n            button.onClick(() => {\n                button.scale = 0.98;\n                setTimeout(() => {\n                    button.scale = 1;\n                }, 100);\n            });\n        });\n    }\n    \n    // ===== ULTRA-FAST FORM HANDLING =====\n    function initializeForms() {\n        const forms = $w('form');\n        forms.forEach(form => {\n            form.onSubmit((event) => {\n                // Prevent default to handle custom submission\n                event.preventDefault();\n                \n                // Add loading state\n                const submitBtn = form.querySelector('button[type=\"submit\"]');\n                if (submitBtn) {\n                    submitBtn.text = 'Sending...';\n                    submitBtn.disabled = true;\n                }\n                \n                // Simulate form submission (replace with actual logic)\n                setTimeout(() => {\n                    if (submitBtn) {\n                        submitBtn.text = 'Sent!';\n                        setTimeout(() => {\n                            submitBtn.text = 'Submit';\n                            submitBtn.disabled = false;\n                        }, 2000);\n                    }\n                }, 1000);\n            });\n        });\n    }\n    \n    // ===== ULTRA-FAST ANIMATIONS =====\n    function initializeAnimations() {\n        // Fade in page content\n        const mainContent = getElement('#mainContent') || $w('main') || $w('.main-content');\n        if (mainContent) {\n            mainContent.opacity = 0;\n            mainContent.style.transition = 'opacity 0.3s ease';\n            \n            setTimeout(() => {\n                mainContent.opacity = 1;\n            }, 100);\n        }\n        \n        // Stagger animations for lists\n        const listItems = $w('li, .list-item');\n        listItems.forEach((item, index) => {\n            item.opacity = 0;\n            item.style.transition = `opacity 0.3s ease ${index * 0.1}s`;\n            \n            setTimeout(() => {\n                item.opacity = 1;\n            }, 200 + (index * 100));\n        });\n    }\n    \n    // ===== ULTRA-FAST PERFORMANCE MONITORING =====\n    function startPerformanceMonitoring() {\n        // Monitor scroll performance\n        let scrollCount = 0;\n        let lastScrollCheck = Date.now();\n        \n        const scrollObserver = () => {\n            scrollCount++;\n            const now = Date.now();\n            \n            if (now - lastScrollCheck > 1000) {\n                const scrollsPerSecond = scrollCount;\n                if (scrollsPerSecond > 30) {\n                    console.warn('High scroll frequency detected, optimizing...');\n                    // Could implement additional optimizations here\n                }\n                scrollCount = 0;\n                lastScrollCheck = now;\n            }\n        };\n        \n        window.addEventListener('scroll', scrollObserver, { passive: true });\n    }\n    \n    // ===== ULTRA-FAST INITIALIZATION =====\n    function initializeUltraFastSite() {\n        console.log('🚀 Initializing Ultra-Fast Site...');\n        \n        // Initialize mobile menu\n        const menuToggle = getElement('#navMenuToggle');\n        if (menuToggle) {\n            menuToggle.onClick(() => toggleMobileMenu());\n        }\n        \n        // Initialize mobile overlay\n        const mobileOverlay = getElement('#mobileOverlay');\n        if (mobileOverlay) {\n            mobileOverlay.onClick(() => toggleMobileMenu());\n        }\n        \n        // Initialize navigation links with ultra-fast scrolling\n        const navLinks = $w('.nav-link, a[href^=\"#\"]');\n        navLinks.forEach(link => {\n            link.onClick((e) => {\n                e.preventDefault();\n                const href = link.href || link.getAttribute('href');\n                if (href && href.startsWith('#')) {\n                    ultraFastScrollTo(href);\n                }\n                if (state.isMenuOpen) {\n                    toggleMobileMenu();\n                }\n            });\n        });\n        \n        // Initialize ultra-smooth scroll\n        window.addEventListener('scroll', ultraSmoothScroll, { passive: true });\n        \n        // Initialize responsive behavior\n        let resizeTimeout;\n        window.addEventListener('resize', () => {\n            if (resizeTimeout) clearTimeout(resizeTimeout);\n            resizeTimeout = setTimeout(() => {\n                const wasMobile = state.isMobile;\n                state.isMobile = window.innerWidth < 768;\n                \n                // Close mobile menu if switching to desktop\n                if (!state.isMobile && wasMobile && state.isMenuOpen) {\n                    toggleMobileMenu();\n                }\n            }, 250);\n        });\n        \n        // Initialize all optimizations\n        optimizeImages();\n        initializeButtons();\n        initializeForms();\n        initializeAnimations();\n        startPerformanceMonitoring();\n        \n        // Mark as loaded\n        state.isLoaded = true;\n        console.log('✅ Ultra-Fast Site Initialized Successfully!');\n        \n        // Dispatch custom event for other scripts\n        window.dispatchEvent(new CustomEvent('ultraFastSiteReady'));\n    }\n    \n    // ===== ERROR HANDLING & CRASH PREVENTION =====\n    function setupErrorHandling() {\n        // Prevent common crashes\n        window.addEventListener('error', (e) => {\n            console.warn('Error caught and handled:', e.error);\n            e.preventDefault();\n        });\n        \n        // Handle unhandled promise rejections\n        window.addEventListener('unhandledrejection', (e) => {\n            console.warn('Unhandled promise rejection caught:', e.reason);\n            e.preventDefault();\n        });\n    }\n    \n    // ===== START EVERYTHING =====\n    setupErrorHandling();\n    initializeUltraFastSite();\n    \n    // Export functions for other pages to use\n    window.ultraFastSite = {\n        scrollTo: ultraFastScrollTo,\n        toggleMenu: toggleMobileMenu,\n        getElement: getElement,\n        state: state\n    \n    // ===== MOBILE OPTIMIZATIONS =====\n    function initializeMobileOptimizations() {\n        console.log('📱 Initializing Mobile Optimizations...');\n        \n        // Mobile detection\n        const isMobile = window.innerWidth < 768;\n        const isTouchDevice = 'ontouchstart' in window;\n        \n        // Update state for mobile\n        if (state) {\n            state.isMobile = isMobile;\n            state.isTouchDevice = isTouchDevice;\n        }\n        \n        // Mobile-specific CSS injection\n        injectMobileCSS();\n        \n        // Mobile touch optimizations\n        if (isTouchDevice) {\n            initializeTouchOptimizations();\n        }\n        \n        // Mobile responsive adjustments\n        initializeMobileResponsive();\n        \n        // Mobile performance optimizations\n        initializeMobilePerformance();\n        \n        console.log('✅ Mobile optimizations initialized!');\n    }\n    \n    function injectMobileCSS() {\n        const mobileCSS = `\n            /* Mobile Optimizations */\n            @media (max-width: 768px) {\n                /* Navigation adjustments */\n                .nav, .navigation {\n                    padding: 0.75rem 1rem !important;\n                }\n                \n                .nav-container, .nav-wrapper {\n                    padding: 0 0.5rem !important;\n                }\n                \n                .nav-logo, .logo {\n                    font-size: 1.25rem !important;\n                }\n                \n                /* Hero section mobile fit */\n                .hero, .heroSection {\n                    min-height: 100vh !important;\n                    padding: 1rem !important;\n                    padding-top: 70px !important;\n                    display: flex !important;\n                    align-items: center !important;\n                    justify-content: center !important;\n                }\n                \n                .hero-content, .heroContent {\n                    width: 100% !important;\n                    max-width: 100% !important;\n                    padding: 0 1rem !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.75rem, 6vw, 2.5rem) !important;\n                    line-height: 1.2 !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4vw, 1.125rem) !important;\n                    margin-bottom: 1.5rem !important;\n                }\n                \n                /* Button container mobile fit */\n                .btn-container, .buttonContainer {\n                    flex-direction: column !important;\n                    align-items: center !important;\n                    width: 100% !important;\n                    gap: 0.75rem !important;\n                }\n                \n                .btn, .button {\n                    width: 100% !important;\n                    max-width: 280px !important;\n                    min-height: 48px !important;\n                    padding: 0.875rem 1.5rem !important;\n                    font-size: 1rem !important;\n                    text-align: center !important;\n                    touch-action: manipulation !important;\n                }\n                \n                /* Features section mobile fit */\n                .features, .featuresSection {\n                    padding: 2rem 1rem !important;\n                }\n                \n                .features h2, .featuresTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 2rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: 1fr !important;\n                    gap: 1.25rem !important;\n                    padding: 0 0.5rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1.25rem !important;\n                    margin: 0 !important;\n                }\n                \n                .feature-card h3, .featureCard h3 {\n                    font-size: 1.125rem !important;\n                    margin-bottom: 0.75rem !important;\n                }\n                \n                .feature-card p, .featureCard p {\n                    font-size: 0.875rem !important;\n                    line-height: 1.5 !important;\n                }\n            }\n            \n            /* Small mobile devices (iPhone SE, etc.) */\n            @media (max-width: 375px) {\n                .hero, .heroSection {\n                    padding: 0.75rem !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 7vw, 2rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 4.5vw, 1rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 260px !important;\n                    padding: 0.75rem 1.25rem !important;\n                    font-size: 0.875rem !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 0.75rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    gap: 1rem !important;\n                    padding: 0 0.25rem !important;\n                }\n                \n                .feature-card, .featureCard {\n                    padding: 1rem !important;\n                }\n            }\n            \n            /* Medium mobile devices (iPhone 12/13) */\n            @media (min-width: 376px) and (max-width: 428px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(1.875rem, 6.5vw, 2.25rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.875rem, 4.5vw, 1.125rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 300px !important;\n                }\n            }\n            \n            /* Large mobile devices (iPhone Pro Max, etc.) */\n            @media (min-width: 429px) and (max-width: 768px) {\n                .hero-title, .heroTitle {\n                    font-size: clamp(2rem, 6vw, 2.5rem) !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(1rem, 4vw, 1.25rem) !important;\n                }\n                \n                .btn, .button {\n                    max-width: 320px !important;\n                }\n            }\n            \n            /* Landscape mobile optimization */\n            @media (max-width: 768px) and (orientation: landscape) {\n                .hero, .heroSection {\n                    min-height: 85vh !important;\n                    padding-top: 60px !important;\n                }\n                \n                .hero-title, .heroTitle {\n                    font-size: clamp(1.5rem, 5vw, 2rem) !important;\n                    margin-bottom: 0.5rem !important;\n                }\n                \n                .hero-subtitle, .heroSubtitle {\n                    font-size: clamp(0.75rem, 3.5vw, 1rem) !important;\n                    margin-bottom: 1rem !important;\n                }\n                \n                .btn-container, .buttonContainer {\n                    flex-direction: row !important;\n                    justify-content: center !important;\n                    gap: 1rem !important;\n                }\n                \n                .btn, .button {\n                    width: auto !important;\n                    max-width: 200px !important;\n                    min-width: 160px !important;\n                }\n                \n                .features, .featuresSection {\n                    padding: 1.5rem 1rem !important;\n                }\n                \n                .features-grid, .featuresGrid {\n                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) !important;\n                    gap: 1rem !important;\n                }\n            }\n            \n            /* Touch device optimizations */\n            @media (hover: none) and (pointer: coarse) {\n                .btn:hover, .button:hover {\n                    transform: none !important;\n                    box-shadow: none !important;\n                }\n                \n                .nav-link:hover, .navLink:hover {\n                    transform: none !important;\n                }\n                \n                .feature-card:hover, .featureCard:hover {\n                    transform: none !important;\n                }\n                \n                /* Enhanced touch targets */\n                .btn, .button, .nav-link, .navLink {\n                    min-height: 44px !important;\n                    min-width: 44px !important;\n                }\n            }\n            \n            /* Safe area support for notched devices */\n            @supports (padding: max(0px)) {\n                .nav, .navigation {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .hero, .heroSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n                \n                .features, .featuresSection {\n                    padding-left: max(1rem, env(safe-area-inset-left)) !important;\n                    padding-right: max(1rem, env(safe-area-inset-right)) !important;\n                }\n            }\n            \n            /* Prevent horizontal scrolling */\n            body {\n                overflow-x: hidden !important;\n                width: 100% !important;\n            }\n            \n            /* Ensure proper container sizing */\n            .nav-container, .nav-wrapper,\n            .hero-content, .heroContent,\n            .features-grid, .featuresGrid {\n                width: 100% !important;\n                max-width: 100% !important;\n                box-sizing: border-box !important;\n            }\n        `;\n        \n        // Inject CSS into head\n        const style = document.createElement('style');\n        style.textContent = mobileCSS;\n        document.head.appendChild(style);\n    }\n    \n    function initializeTouchOptimizations() {\n        // Enhanced touch feedback for buttons\n        const buttons = $w('.btn, .button, [data-testid*=\"button\"]');\n        buttons.forEach(btn => {\n            if (!btn) return;\n            \n            // Touch start effect\n            btn.onTouchStart(() => {\n                btn.style.transform = 'scale(0.95)';\n                btn.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            // Touch end effect\n            btn.onTouchEnd(() => {\n                setTimeout(() => {\n                    btn.style.transform = '';\n                    btn.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Enhanced touch feedback for cards\n        const cards = $w('.feature-card, .featureCard, .card');\n        cards.forEach(card => {\n            if (!card) return;\n            \n            card.onTouchStart(() => {\n                card.style.transform = 'scale(0.98)';\n                card.style.transition = 'transform 0.15s cubic-bezier(0.4, 0, 0.2, 1)';\n            });\n            \n            card.onTouchEnd(() => {\n                setTimeout(() => {\n                    card.style.transform = '';\n                    card.style.transition = 'transform 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n                }, 150);\n            });\n        });\n        \n        // Prevent zoom on double tap\n        let lastTouchEnd = 0;\n        document.addEventListener('touchend', (event) => {\n            const now = (new Date()).getTime();\n            if (now - lastTouchEnd <= 300) {\n                event.preventDefault();\n            }\n            lastTouchEnd = now;\n        }, false);\n    }\n    \n    function initializeMobileResponsive() {\n        // Mobile-specific element adjustments\n        const heroSection = $w('#heroSection') || $w('.hero');\n        if (heroSection && state.isMobile) {\n            // Adjust hero for mobile\n            heroSection.style.minHeight = '100vh';\n            heroSection.style.padding = '1rem';\n            heroSection.style.paddingTop = '70px';\n        }\n        \n        // Mobile navigation adjustments\n        const nav = $w('.nav, .navigation');\n        if (nav && state.isMobile) {\n            nav.style.padding = '0.75rem 1rem';\n        }\n        \n        // Mobile button adjustments\n        const buttons = $w('.btn, .button');\n        buttons.forEach(btn => {\n            if (!btn || !state.isMobile) return;\n            \n            btn.style.width = '100%';\n            btn.style.maxWidth = '280px';\n            btn.style.minHeight = '48px';\n            btn.style.padding = '0.875rem 1.5rem';\n            btn.style.fontSize = '1rem';\n            btn.style.textAlign = 'center';\n            btn.style.touchAction = 'manipulation';\n        });\n    }\n    \n    function initializeMobilePerformance() {\n        // Mobile-specific performance optimizations\n        if (state.isMobile) {\n            // Reduce animation complexity on mobile\n            const animations = $w('[data-animation]');\n            animations.forEach(anim => {\n                if (!anim) return;\n                anim.style.transition = 'opacity 0.3s ease, transform 0.3s ease';\n            });\n            \n            // Optimize scroll performance\n            const scrollElements = $w('.scroll-container, .scrollContainer');\n            scrollElements.forEach(element => {\n                if (!element) return;\n                element.style.willChange = 'transform';\n                element.style.transform = 'translateZ(0)';\n            });\n        }\n    }\n    \n    // Initialize mobile optimizations after page load\n    setTimeout(() => {\n        initializeMobileOptimizations();\n    }, 100);\n};\n});",
      "description": "Master page with mobile optimizations"
    }
  },
  "instructions": {
    "step1": "Copy the content from each file",
    "step2": "Paste into Wix Studio Custom Code section",
    "step3": "Test in Wix Studio preview",
    "step4": "Publish when satisfied"
  }
}